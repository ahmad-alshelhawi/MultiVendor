// <auto-generated />
using System;
using AttarStore.Services.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AttarStore.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250514103120_5")]
    partial class _5
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AttarStore.Domain.Entities.Admin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResetToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ResetTokenExpiry")
                        .HasColumnType("datetime2");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Admins");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "",
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 5, 14, 10, 31, 20, 76, DateTimeKind.Unspecified).AddTicks(3122), new TimeSpan(0, 0, 0, 0, 0)),
                            Email = "ahmad.al.shelhawi@gmail.com",
                            IsDeleted = false,
                            Name = "admin",
                            Password = "$2a$11$EhWfilJGg8QCA5p0wLsrPeebtldwd3J0/vAhbQIuV/LoFeDi4IpAC",
                            Phone = "096654467",
                            Role = "Admin"
                        });
                });

            modelBuilder.Entity("AttarStore.Domain.Entities.AdminNotification", b =>
                {
                    b.Property<int>("AdminId")
                        .HasColumnType("int");

                    b.Property<int>("NotificationId")
                        .HasColumnType("int");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.HasKey("AdminId", "NotificationId");

                    b.HasIndex("NotificationId");

                    b.ToTable("AdminNotifications");
                });

            modelBuilder.Entity("AttarStore.Domain.Entities.Auth.AuditLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ActorId")
                        .HasColumnType("int");

                    b.Property<string>("ActorName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ActorRole")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ActorType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Details")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("EntityId")
                        .HasColumnType("int");

                    b.Property<string>("EntityName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EntityType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Timestamp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.HasKey("Id");

                    b.ToTable("AuditLogs");
                });

            modelBuilder.Entity("AttarStore.Domain.Entities.Auth.Permission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Permissions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Create new categories",
                            Name = "Category.Create"
                        },
                        new
                        {
                            Id = 2,
                            Description = "View categories",
                            Name = "Category.Read"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Edit categories",
                            Name = "Category.Update"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Delete categories",
                            Name = "Category.Delete"
                        },
                        new
                        {
                            Id = 5,
                            Description = "Create new products",
                            Name = "Product.Create"
                        },
                        new
                        {
                            Id = 6,
                            Description = "View products",
                            Name = "Product.Read"
                        },
                        new
                        {
                            Id = 7,
                            Description = "Edit products",
                            Name = "Product.Update"
                        },
                        new
                        {
                            Id = 8,
                            Description = "Delete products",
                            Name = "Product.Delete"
                        },
                        new
                        {
                            Id = 9,
                            Description = "Place orders",
                            Name = "Order.Create"
                        },
                        new
                        {
                            Id = 10,
                            Description = "View all orders (admins)",
                            Name = "Order.ReadAll"
                        },
                        new
                        {
                            Id = 11,
                            Description = "View own orders",
                            Name = "Order.ReadOwn"
                        },
                        new
                        {
                            Id = 12,
                            Description = "Update orders",
                            Name = "Order.Update"
                        },
                        new
                        {
                            Id = 13,
                            Description = "Cancel orders",
                            Name = "Order.Delete"
                        },
                        new
                        {
                            Id = 14,
                            Description = "Manage permissions",
                            Name = "Permission.Create"
                        },
                        new
                        {
                            Id = 15,
                            Description = "View permissions",
                            Name = "Permission.Read"
                        },
                        new
                        {
                            Id = 16,
                            Description = "Edit permissions",
                            Name = "Permission.Update"
                        },
                        new
                        {
                            Id = 17,
                            Description = "Remove permissions",
                            Name = "Permission.Delete"
                        },
                        new
                        {
                            Id = 18,
                            Description = "Vendor requests a new category",
                            Name = "CategoryRequest.Create"
                        },
                        new
                        {
                            Id = 19,
                            Description = "Vendor reads own category requests",
                            Name = "CategoryRequest.ReadOwn"
                        },
                        new
                        {
                            Id = 20,
                            Description = "Admin reads all category requests",
                            Name = "CategoryRequest.ReadAll"
                        },
                        new
                        {
                            Id = 21,
                            Description = "Admin approves/rejects requests",
                            Name = "CategoryRequest.Update"
                        },
                        new
                        {
                            Id = 22,
                            Description = "Admin add new user assigned to a vendor",
                            Name = "VendorUser.Create"
                        },
                        new
                        {
                            Id = 23,
                            Description = "Admin reads users of a specific vendor",
                            Name = "VendorUser.Read"
                        },
                        new
                        {
                            Id = 24,
                            Description = "Admin updates vendor’s user",
                            Name = "VendorUser.Update"
                        },
                        new
                        {
                            Id = 40,
                            Description = "Create vendors",
                            Name = "Vendor.Create"
                        },
                        new
                        {
                            Id = 41,
                            Description = "View vendors",
                            Name = "Vendor.Read"
                        },
                        new
                        {
                            Id = 42,
                            Description = "Edit vendors",
                            Name = "Vendor.Update"
                        },
                        new
                        {
                            Id = 43,
                            Description = "Delete vendors",
                            Name = "Vendor.Delete"
                        });
                });

            modelBuilder.Entity("AttarStore.Domain.Entities.Auth.RefreshToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AdminId")
                        .HasColumnType("int");

                    b.Property<int?>("ClientId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsRevoked")
                        .HasColumnType("bit");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AdminId");

                    b.HasIndex("ClientId");

                    b.HasIndex("UserId");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("AttarStore.Domain.Entities.Auth.RolePermission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("PermissionId")
                        .HasColumnType("int");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("PermissionId");

                    b.ToTable("RolePermissions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            PermissionId = 1,
                            RoleName = "Admin"
                        },
                        new
                        {
                            Id = 2,
                            PermissionId = 2,
                            RoleName = "Admin"
                        },
                        new
                        {
                            Id = 3,
                            PermissionId = 3,
                            RoleName = "Admin"
                        },
                        new
                        {
                            Id = 4,
                            PermissionId = 4,
                            RoleName = "Admin"
                        },
                        new
                        {
                            Id = 5,
                            PermissionId = 5,
                            RoleName = "Admin"
                        },
                        new
                        {
                            Id = 6,
                            PermissionId = 6,
                            RoleName = "Admin"
                        },
                        new
                        {
                            Id = 7,
                            PermissionId = 7,
                            RoleName = "Admin"
                        },
                        new
                        {
                            Id = 8,
                            PermissionId = 8,
                            RoleName = "Admin"
                        },
                        new
                        {
                            Id = 9,
                            PermissionId = 9,
                            RoleName = "Admin"
                        },
                        new
                        {
                            Id = 10,
                            PermissionId = 10,
                            RoleName = "Admin"
                        },
                        new
                        {
                            Id = 11,
                            PermissionId = 11,
                            RoleName = "Admin"
                        },
                        new
                        {
                            Id = 12,
                            PermissionId = 12,
                            RoleName = "Admin"
                        },
                        new
                        {
                            Id = 13,
                            PermissionId = 13,
                            RoleName = "Admin"
                        },
                        new
                        {
                            Id = 14,
                            PermissionId = 1,
                            RoleName = "VendorAdmin"
                        },
                        new
                        {
                            Id = 15,
                            PermissionId = 2,
                            RoleName = "VendorAdmin"
                        },
                        new
                        {
                            Id = 16,
                            PermissionId = 3,
                            RoleName = "VendorAdmin"
                        },
                        new
                        {
                            Id = 17,
                            PermissionId = 4,
                            RoleName = "VendorAdmin"
                        },
                        new
                        {
                            Id = 18,
                            PermissionId = 5,
                            RoleName = "VendorAdmin"
                        },
                        new
                        {
                            Id = 19,
                            PermissionId = 6,
                            RoleName = "VendorAdmin"
                        },
                        new
                        {
                            Id = 20,
                            PermissionId = 7,
                            RoleName = "VendorAdmin"
                        },
                        new
                        {
                            Id = 21,
                            PermissionId = 8,
                            RoleName = "VendorAdmin"
                        },
                        new
                        {
                            Id = 22,
                            PermissionId = 11,
                            RoleName = "VendorAdmin"
                        },
                        new
                        {
                            Id = 23,
                            PermissionId = 6,
                            RoleName = "VendorUser"
                        },
                        new
                        {
                            Id = 24,
                            PermissionId = 7,
                            RoleName = "VendorUser"
                        },
                        new
                        {
                            Id = 25,
                            PermissionId = 5,
                            RoleName = "VendorUser"
                        },
                        new
                        {
                            Id = 26,
                            PermissionId = 6,
                            RoleName = "Client"
                        },
                        new
                        {
                            Id = 27,
                            PermissionId = 9,
                            RoleName = "Client"
                        },
                        new
                        {
                            Id = 28,
                            PermissionId = 11,
                            RoleName = "Client"
                        },
                        new
                        {
                            Id = 29,
                            PermissionId = 14,
                            RoleName = "Admin"
                        },
                        new
                        {
                            Id = 30,
                            PermissionId = 15,
                            RoleName = "Admin"
                        },
                        new
                        {
                            Id = 31,
                            PermissionId = 16,
                            RoleName = "Admin"
                        },
                        new
                        {
                            Id = 32,
                            PermissionId = 17,
                            RoleName = "Admin"
                        },
                        new
                        {
                            Id = 33,
                            PermissionId = 18,
                            RoleName = "VendorAdmin"
                        },
                        new
                        {
                            Id = 34,
                            PermissionId = 19,
                            RoleName = "VendorAdmin"
                        },
                        new
                        {
                            Id = 35,
                            PermissionId = 20,
                            RoleName = "Admin"
                        },
                        new
                        {
                            Id = 36,
                            PermissionId = 21,
                            RoleName = "Admin"
                        },
                        new
                        {
                            Id = 37,
                            PermissionId = 40,
                            RoleName = "Admin"
                        },
                        new
                        {
                            Id = 38,
                            PermissionId = 41,
                            RoleName = "Admin"
                        },
                        new
                        {
                            Id = 39,
                            PermissionId = 42,
                            RoleName = "Admin"
                        },
                        new
                        {
                            Id = 40,
                            PermissionId = 43,
                            RoleName = "Admin"
                        },
                        new
                        {
                            Id = 41,
                            PermissionId = 41,
                            RoleName = "VendorAdmin"
                        },
                        new
                        {
                            Id = 42,
                            PermissionId = 42,
                            RoleName = "VendorAdmin"
                        });
                });

            modelBuilder.Entity("AttarStore.Domain.Entities.Auth.UserPermission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsGranted")
                        .HasColumnType("bit");

                    b.Property<string>("PermissionName")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId", "PermissionName")
                        .IsUnique();

                    b.ToTable("UserPermissions");
                });

            modelBuilder.Entity("AttarStore.Domain.Entities.Catalog.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("AttarStore.Domain.Entities.Catalog.CategoryRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResponseMessage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("VendorId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("VendorId");

                    b.ToTable("CategoryRequests");
                });

            modelBuilder.Entity("AttarStore.Domain.Entities.Catalog.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("DefaultPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("DefaultStock")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SubcategoryId")
                        .HasColumnType("int");

                    b.Property<int?>("VendorId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SubcategoryId");

                    b.HasIndex("VendorId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("AttarStore.Domain.Entities.Catalog.ProductImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductImages");
                });

            modelBuilder.Entity("AttarStore.Domain.Entities.Catalog.ProductVariantAttribute", b =>
                {
                    b.Property<int>("ProductVariantId")
                        .HasColumnType("int");

                    b.Property<int>("VariantOptionId")
                        .HasColumnType("int");

                    b.Property<int>("VariantOptionValueId")
                        .HasColumnType("int");

                    b.HasKey("ProductVariantId", "VariantOptionId", "VariantOptionValueId");

                    b.HasIndex("VariantOptionId");

                    b.HasIndex("VariantOptionValueId");

                    b.ToTable("ProductVariantAttributes");
                });

            modelBuilder.Entity("AttarStore.Domain.Entities.Catalog.ProductVariantImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ProductVariantId")
                        .HasColumnType("int");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProductVariantId");

                    b.ToTable("ProductVariantImage");
                });

            modelBuilder.Entity("AttarStore.Domain.Entities.Catalog.Subcategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId", "Name")
                        .IsUnique();

                    b.ToTable("Subcategories");
                });

            modelBuilder.Entity("AttarStore.Domain.Entities.Catalog.VariantOption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("VariantOptions");
                });

            modelBuilder.Entity("AttarStore.Domain.Entities.Catalog.VariantOptionValue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("VariantOptionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("VariantOptionId");

                    b.ToTable("VariantOptionValues");
                });

            modelBuilder.Entity("AttarStore.Domain.Entities.Client", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResetToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ResetTokenExpiry")
                        .HasColumnType("datetime2");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("AttarStore.Domain.Entities.ClientNotification", b =>
                {
                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<int>("NotificationId")
                        .HasColumnType("int");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.HasKey("ClientId", "NotificationId");

                    b.HasIndex("NotificationId");

                    b.ToTable("ClientNotifications");
                });

            modelBuilder.Entity("AttarStore.Domain.Entities.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("SentAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("AttarStore.Domain.Entities.Shopping.Cart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("ClientId")
                        .IsUnique();

                    b.ToTable("Carts");
                });

            modelBuilder.Entity("AttarStore.Domain.Entities.Shopping.CartItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CartId")
                        .HasColumnType("int");

                    b.Property<int>("ProductVariantId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("ProductVariantId");

                    b.HasIndex("CartId", "ProductVariantId")
                        .IsUnique();

                    b.ToTable("CartItems");
                });

            modelBuilder.Entity("AttarStore.Domain.Entities.Shopping.InventoryTransaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.Property<int?>("ProductVariantId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Timestamp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("ProductVariantId");

                    b.HasIndex("UserId");

                    b.ToTable("InventoryTransactions");
                });

            modelBuilder.Entity("AttarStore.Domain.Entities.Shopping.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("AttarStore.Domain.Entities.Shopping.OrderItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("ProductVariantId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("ProductVariantId");

                    b.HasIndex("OrderId", "ProductVariantId")
                        .IsUnique();

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("AttarStore.Domain.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("AdminId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResetToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ResetTokenExpiry")
                        .HasColumnType("datetime2");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("VendorId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AdminId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("VendorId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("AttarStore.Domain.Entities.UserNotification", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("NotificationId")
                        .HasColumnType("int");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.HasKey("UserId", "NotificationId");

                    b.HasIndex("NotificationId");

                    b.ToTable("UserNotifications");
                });

            modelBuilder.Entity("AttarStore.Domain.Entities.Vendor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Vendors");
                });

            modelBuilder.Entity("AttarStore.Domain.Entities.VendorNotification", b =>
                {
                    b.Property<int>("VendorId")
                        .HasColumnType("int");

                    b.Property<int>("NotificationId")
                        .HasColumnType("int");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.HasKey("VendorId", "NotificationId");

                    b.HasIndex("NotificationId");

                    b.ToTable("VendorNotifications");
                });

            modelBuilder.Entity("ProductVariant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("Sku")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Stock")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId", "Sku")
                        .IsUnique();

                    b.ToTable("ProductVariants");
                });

            modelBuilder.Entity("AttarStore.Domain.Entities.AdminNotification", b =>
                {
                    b.HasOne("AttarStore.Domain.Entities.Admin", "Admin")
                        .WithMany("AdminNotifications")
                        .HasForeignKey("AdminId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AttarStore.Domain.Entities.Notification", "Notification")
                        .WithMany("AdminNotifications")
                        .HasForeignKey("NotificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Admin");

                    b.Navigation("Notification");
                });

            modelBuilder.Entity("AttarStore.Domain.Entities.Auth.RefreshToken", b =>
                {
                    b.HasOne("AttarStore.Domain.Entities.Admin", "Admin")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("AdminId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AttarStore.Domain.Entities.Client", "Client")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AttarStore.Domain.Entities.User", "User")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Admin");

                    b.Navigation("Client");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AttarStore.Domain.Entities.Auth.RolePermission", b =>
                {
                    b.HasOne("AttarStore.Domain.Entities.Auth.Permission", "Permission")
                        .WithMany("RolePermissions")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permission");
                });

            modelBuilder.Entity("AttarStore.Domain.Entities.Auth.UserPermission", b =>
                {
                    b.HasOne("AttarStore.Domain.Entities.User", "User")
                        .WithMany("UserPermissions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("AttarStore.Domain.Entities.Catalog.CategoryRequest", b =>
                {
                    b.HasOne("AttarStore.Domain.Entities.Vendor", "Vendor")
                        .WithMany("CategoryRequests")
                        .HasForeignKey("VendorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Vendor");
                });

            modelBuilder.Entity("AttarStore.Domain.Entities.Catalog.Product", b =>
                {
                    b.HasOne("AttarStore.Domain.Entities.Catalog.Subcategory", "Subcategory")
                        .WithMany("Products")
                        .HasForeignKey("SubcategoryId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("AttarStore.Domain.Entities.Vendor", "Vendor")
                        .WithMany("Products")
                        .HasForeignKey("VendorId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Subcategory");

                    b.Navigation("Vendor");
                });

            modelBuilder.Entity("AttarStore.Domain.Entities.Catalog.ProductImage", b =>
                {
                    b.HasOne("AttarStore.Domain.Entities.Catalog.Product", "Product")
                        .WithMany("Images")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("AttarStore.Domain.Entities.Catalog.ProductVariantAttribute", b =>
                {
                    b.HasOne("ProductVariant", "ProductVariant")
                        .WithMany("Attributes")
                        .HasForeignKey("ProductVariantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AttarStore.Domain.Entities.Catalog.VariantOption", "VariantOption")
                        .WithMany()
                        .HasForeignKey("VariantOptionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AttarStore.Domain.Entities.Catalog.VariantOptionValue", "VariantOptionValue")
                        .WithMany()
                        .HasForeignKey("VariantOptionValueId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ProductVariant");

                    b.Navigation("VariantOption");

                    b.Navigation("VariantOptionValue");
                });

            modelBuilder.Entity("AttarStore.Domain.Entities.Catalog.ProductVariantImage", b =>
                {
                    b.HasOne("ProductVariant", "ProductVariant")
                        .WithMany("Images")
                        .HasForeignKey("ProductVariantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductVariant");
                });

            modelBuilder.Entity("AttarStore.Domain.Entities.Catalog.Subcategory", b =>
                {
                    b.HasOne("AttarStore.Domain.Entities.Catalog.Category", "Category")
                        .WithMany("Subcategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("AttarStore.Domain.Entities.Catalog.VariantOptionValue", b =>
                {
                    b.HasOne("AttarStore.Domain.Entities.Catalog.VariantOption", "VariantOption")
                        .WithMany("Values")
                        .HasForeignKey("VariantOptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("VariantOption");
                });

            modelBuilder.Entity("AttarStore.Domain.Entities.ClientNotification", b =>
                {
                    b.HasOne("AttarStore.Domain.Entities.Client", "Client")
                        .WithMany("ClientNotifications")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AttarStore.Domain.Entities.Notification", "Notification")
                        .WithMany("ClientNotifications")
                        .HasForeignKey("NotificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("Notification");
                });

            modelBuilder.Entity("AttarStore.Domain.Entities.Shopping.Cart", b =>
                {
                    b.HasOne("AttarStore.Domain.Entities.Client", "Client")
                        .WithOne("Cart")
                        .HasForeignKey("AttarStore.Domain.Entities.Shopping.Cart", "ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("AttarStore.Domain.Entities.Shopping.CartItem", b =>
                {
                    b.HasOne("AttarStore.Domain.Entities.Shopping.Cart", "Cart")
                        .WithMany("Items")
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProductVariant", "ProductVariant")
                        .WithMany()
                        .HasForeignKey("ProductVariantId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Cart");

                    b.Navigation("ProductVariant");
                });

            modelBuilder.Entity("AttarStore.Domain.Entities.Shopping.InventoryTransaction", b =>
                {
                    b.HasOne("AttarStore.Domain.Entities.Catalog.Product", "Product")
                        .WithMany("InventoryTransactions")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ProductVariant", "ProductVariant")
                        .WithMany("InventoryTransactions")
                        .HasForeignKey("ProductVariantId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AttarStore.Domain.Entities.User", "User")
                        .WithMany("InventoryTransactions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Product");

                    b.Navigation("ProductVariant");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AttarStore.Domain.Entities.Shopping.Order", b =>
                {
                    b.HasOne("AttarStore.Domain.Entities.Client", "Client")
                        .WithMany("Orders")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("AttarStore.Domain.Entities.Shopping.OrderItem", b =>
                {
                    b.HasOne("AttarStore.Domain.Entities.Shopping.Order", "Order")
                        .WithMany("Items")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProductVariant", "ProductVariant")
                        .WithMany()
                        .HasForeignKey("ProductVariantId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("ProductVariant");
                });

            modelBuilder.Entity("AttarStore.Domain.Entities.User", b =>
                {
                    b.HasOne("AttarStore.Domain.Entities.Admin", "Admin")
                        .WithMany()
                        .HasForeignKey("AdminId");

                    b.HasOne("AttarStore.Domain.Entities.Vendor", "Vendor")
                        .WithMany("Users")
                        .HasForeignKey("VendorId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Admin");

                    b.Navigation("Vendor");
                });

            modelBuilder.Entity("AttarStore.Domain.Entities.UserNotification", b =>
                {
                    b.HasOne("AttarStore.Domain.Entities.Notification", "Notification")
                        .WithMany("UserNotifications")
                        .HasForeignKey("NotificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AttarStore.Domain.Entities.User", "User")
                        .WithMany("UserNotifications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Notification");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AttarStore.Domain.Entities.VendorNotification", b =>
                {
                    b.HasOne("AttarStore.Domain.Entities.Notification", "Notification")
                        .WithMany("VendorNotifications")
                        .HasForeignKey("NotificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AttarStore.Domain.Entities.Vendor", "Vendor")
                        .WithMany("VendorNotifications")
                        .HasForeignKey("VendorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Notification");

                    b.Navigation("Vendor");
                });

            modelBuilder.Entity("ProductVariant", b =>
                {
                    b.HasOne("AttarStore.Domain.Entities.Catalog.Product", "Product")
                        .WithMany("Variants")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("AttarStore.Domain.Entities.Admin", b =>
                {
                    b.Navigation("AdminNotifications");

                    b.Navigation("RefreshTokens");
                });

            modelBuilder.Entity("AttarStore.Domain.Entities.Auth.Permission", b =>
                {
                    b.Navigation("RolePermissions");
                });

            modelBuilder.Entity("AttarStore.Domain.Entities.Catalog.Category", b =>
                {
                    b.Navigation("Subcategories");
                });

            modelBuilder.Entity("AttarStore.Domain.Entities.Catalog.Product", b =>
                {
                    b.Navigation("Images");

                    b.Navigation("InventoryTransactions");

                    b.Navigation("Variants");
                });

            modelBuilder.Entity("AttarStore.Domain.Entities.Catalog.Subcategory", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("AttarStore.Domain.Entities.Catalog.VariantOption", b =>
                {
                    b.Navigation("Values");
                });

            modelBuilder.Entity("AttarStore.Domain.Entities.Client", b =>
                {
                    b.Navigation("Cart");

                    b.Navigation("ClientNotifications");

                    b.Navigation("Orders");

                    b.Navigation("RefreshTokens");
                });

            modelBuilder.Entity("AttarStore.Domain.Entities.Notification", b =>
                {
                    b.Navigation("AdminNotifications");

                    b.Navigation("ClientNotifications");

                    b.Navigation("UserNotifications");

                    b.Navigation("VendorNotifications");
                });

            modelBuilder.Entity("AttarStore.Domain.Entities.Shopping.Cart", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("AttarStore.Domain.Entities.Shopping.Order", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("AttarStore.Domain.Entities.User", b =>
                {
                    b.Navigation("InventoryTransactions");

                    b.Navigation("RefreshTokens");

                    b.Navigation("UserNotifications");

                    b.Navigation("UserPermissions");
                });

            modelBuilder.Entity("AttarStore.Domain.Entities.Vendor", b =>
                {
                    b.Navigation("CategoryRequests");

                    b.Navigation("Products");

                    b.Navigation("Users");

                    b.Navigation("VendorNotifications");
                });

            modelBuilder.Entity("ProductVariant", b =>
                {
                    b.Navigation("Attributes");

                    b.Navigation("Images");

                    b.Navigation("InventoryTransactions");
                });
#pragma warning restore 612, 618
        }
    }
}
